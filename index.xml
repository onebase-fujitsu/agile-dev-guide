<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>富士通アジャイルデベロップメントガイドブック on Fujitsu Agile Development Guide</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/</link><description>Recent content in 富士通アジャイルデベロップメントガイドブック on Fujitsu Agile Development Guide</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 04 Aug 2021 14:37:44 +0900</lastBuildDate><atom:link href="https://onebase-fujitsu.github.io/agile-dev-guide/index.xml" rel="self" type="application/rss+xml"/><item><title>1日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day1/</guid><description>1日目 # アプリケーションの要件 # では、早速アジャイル開発で実際に動くアプリケーションを作ってみましょう。 今回は、簡単な例としてタスク管理のア</description></item><item><title>Designerとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/overview/</guid><description>Designerとは # Designerは、デザイン上の意思決定という形で価値を届けます。 その仕事はユーザーにとって望ましく、使いやすいソリュ</description></item><item><title>Developerとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/overview/</guid><description>Developerとは # Developer(Dev)は、バックログを実装しプロダクトを作ることに責任を持ちます。また、ソリューションの検討に</description></item><item><title>ONEbaseの価値観</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/onebase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/onebase/</guid><description>ONEbaseの価値観 # Core Values # 3 Things to Make it Work / 3 Agreements # 3 Things to Make it Work / 3つの成功させるためのポイント # 1. Trust in team &amp;amp; process / チームとプロセスへの信頼 2. Interest in</description></item><item><title>Product Managerとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/overview/</guid><description>Product Managerとは # Product Manager(PdM)は、会社やユーザーにとって価値を生み出すプロダクトを発見し、実現できるようにチームを導きます</description></item><item><title>Swift Method とは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/overview/</guid><description>Swift Method とは # 背景 # レガシーシステムをモダナイズする際に以下のような問題点に直面します。 レガシーシステムについて知識のある人がいなくなっている 言</description></item><item><title>TDD</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/tdd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/tdd/</guid><description>TDD # 概要 # テスト駆動開発（Test-Driven Development; TDD）は、先にテストを書き、次に機能の実装し、その後コードのリファクタリングを行うという</description></item><item><title>アジャイルソフトウェア開発宣言</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/manifest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/manifest/</guid><description>アジャイルソフトウェア開発宣言 # アジャイル開発とはなにかという問いに対して簡潔に答えるとすると、 「アジャイルソフトウェア開発宣言のマインドに</description></item><item><title>アジャイル開発に求められるソフトウェア設計</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/about/</guid><description>アジャイル開発に求められるソフトウェア設計 # アジャイル開発では開発の途中で求められるソフトウェア仕様がどんどん変化します。 そのため、変化に強</description></item><item><title>エクストリームプログラミングとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/overview/</guid><description>エクストリームプログラミングとは # エクストリームプログラミング（以下、XP）はアジャイルソフトウェア開発宣言をだしたメンバーの一人、 Kent Bec</description></item><item><title>スクラムとは</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/overview/</guid><description>スクラムとは # スクラムはアジャイルの開発手法の1つです。1990年代にJeff SutherlandとKen Schwaberによって策定されま</description></item><item><title>ソフトウェアテストを始めよう</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/overview/</guid><description>ソフトウェアテストを始めよう # ここまでアジャイルやスクラム、XPについて学んできました。 それぞれ、マインドセットや枠組みの話でしたので 「結局</description></item><item><title>チームの働き方</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/workstyle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/workstyle/</guid><description>チームの働き方 # 心理的な安全性のあるチームで、安定したペースでの開発を目指します。 ペアワーク すべての作業をペアで行います。 手戻り防止、情報シ</description></item><item><title>デザインパターン</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/designpattern/designpattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/designpattern/designpattern/</guid><description>デザインパターンとは # 後日執筆予定</description></item><item><title>はじめに</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/introduction/</guid><description>はじめに # 近年アジャイルや内製化が叫ばれて久しいですが、それは弊社でも同じです。 しかし、アジャイル開発はこれまで行われてきたウォーターフォー</description></item><item><title>ファシリテーション</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/practices/facilitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/practices/facilitation/</guid><description>ファシリテーション # 概要 # 会議やミーティング（MTG）が円滑に進むよう支援することです。 ファシリテーションの役割を担う人を「ファシリテーター</description></item><item><title>プロダクトロードマップ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/roadmap/</guid><description>プロダクトロードマップ # 概要 # プロダクトロードマップとは、プロダクトのビジョンを実現するための道のり（戦略）を明らかにするものです。 プロダク</description></item><item><title>ペルソナ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/persona/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/persona/</guid><description>ペルソナ # 概要 # ペルソナとは、ユーザーのプロトタイプモデルです。 多数の実ユーザーを対象にヒアリングなどによる調査を行い、類似するニーズ、ゴー</description></item><item><title>モダナイゼーションアジャイルの流れ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/overview/</guid><description>モダナイゼーションアジャイルの流れ # モダナイゼーションアジャイルでは、既存のブラックボックス化しているレガシーシステムに対して、ビジネス視点</description></item><item><title>リーンスタートアップアジャイルの流れ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/leanstartup/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/leanstartup/overview/</guid><description>リーンスタートアップアジャイルの流れ # リーンスタートアップアジャイルでは、ユーザーに対する仮説検証を繰り返しながら、アジリティを持ってプロダ</description></item><item><title>全体スタンドアップ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/officestandup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/officestandup/</guid><description>全体スタンドアップ # 概要 # 同じ職場で働く全チームが集まって、立ちながら行うミーティングです。 以下の内容を共有します。 NewFaces（新しい</description></item><item><title>単一責任の原則(SRP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/srp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/srp/</guid><description>単一責任の原則(The Single Responsibility Principle) # 単一責任の原則(SRP)とはなにか？ # 単一責任の原則(SRP)とはクラスを変更する理由は1つ以上存在してはなら</description></item><item><title>2日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day2/</guid><description>2日目 # 2日目はClientがServerに対してHTTPリクエストを実行するところ、そして、Serverの初期設定をして簡単なAPIを作っ</description></item><item><title>CI/CD</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/cicd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/cicd/</guid><description>CI/CD # 概要 # CI/CDとは継続的インテグレーション（CI）と継続的デリバリー（CD）を組み合わせたプラクティスです。ビルド/テスト/デプロイを</description></item><item><title>Event Storming</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/eventstorming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/eventstorming/</guid><description>Event Storming # 概要 # Event Stormingは、既存システムをいくつかの小さい単位のサービスに分解したいときに使うアクティビティの一つです。 既存システムの</description></item><item><title>MVP</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/mvp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/mvp/</guid><description>MVP # 概要 # MVP(Minimum Viable Product)とは、ユーザーに価値を提供できる最小限のプロダクトのことです。 仮説検証のプロセスで利用します。 最小限（Mini</description></item><item><title>OKRs</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/practices/okrs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/practices/okrs/</guid><description>OKRs # 概要 # OKRs（Objectives and Key Results）とは、目標管理の手法のひとつです。 チームの目標（Objectives）と、目標達</description></item><item><title>アジャイル開発12の原則</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/principle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/principle/</guid><description>アジャイル開発12の原則 # アジャイルソフトウェア開発宣言 で宣言されていた内容は、 アジャイル開発をする上で大事なマインドセットを述べたものでし</description></item><item><title>ウォーミングアップ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/fizzbuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/fizzbuzz/</guid><description>ウォーミングアップ # ここではテスト駆動開発の手法で極々簡単なコンソールアプリケーションを作ってみようと思います。 開発言語はここではJavaを</description></item><item><title>エクストリームプログラミングのプラクティス</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/practice/</guid><description>エクストリームプログラミングのプラクティス # チームメンバーとしての顧客 # 顧客と開発者は同じ空間で机を突き合わせて、親密に仕事をするのが望まし</description></item><item><title>オープン・クローズドの原則(OCP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/ocp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/ocp/</guid><description>オープン・クローズドの原則(The Open Closed Principle) # オープン・クローズドの原則(OCP)とはなにか？ # オープン・クローズドの原則(OCP)とは ソフトウ</description></item><item><title>シナリオ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/scenario/</guid><description>シナリオ # 概要 # シナリオは、ターゲットユーザーがどのような流れでソフトウェアを利用するかを時系列で具体的に記入したものです。 シナリオは、以下</description></item><item><title>チームスタンドアップ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/teamstandup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/teamstandup/</guid><description>チームスタンドアップ # 概要 # チームのメンバー全員で立ちながら行うミーティングです。 以下の内容を共有し、タスクの確認を行います。 昨日やったこと</description></item><item><title>バランスチーム</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/balancedteam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/balancedteam/</guid><description>バランスチーム # 3つの役割 # バランスチームでは、ビジネス価値・ユーザー価値・技術的な実現性のそれぞれに責任を持つ3つの役割（Product M</description></item><item><title>ロール</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/roles/</guid><description>ロール # スクラムではアジャイル開発チームにおける役割を3つ規定しています。 プロダクトオーナー プロダクト開発チーム スクラムマスター それぞれにつ</description></item><item><title>体制・役割</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/leanstartup/organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/leanstartup/organization/</guid><description>体制・役割 # Coreチーム # Product Managers # Product Managers(PdMs)は正しいものを作るためにビジネス価値、ユーザー価値、技術的な難易度を踏まえて</description></item><item><title>体制・役割</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/organization/</guid><description>体制・役割 # Coreチーム # Product Managers # Product Managers(PdMs)は正しいものを作るためにビジネス価値、ユーザー価値、技術的な難易度を踏まえて</description></item><item><title>心理的安全性</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/psychologicalsafety/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/psychologicalsafety/</guid><description>心理的安全性 # プロジェクトの実行にあたって「心理的安全性」を確保することは非常に重要です。 「心理的安全性」とは、チームのメンバーがアイデア、</description></item><item><title>3日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day3/</guid><description>3日目 # 2日目まででタスク一覧をサーバに対して要求して、レスポンスに応じてタスク一覧を画面に描画するフロントエンドができました。 ただ、現時点</description></item><item><title>Boris</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/boris/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/boris/</guid><description>Boris # 概要 # Borisは既存システムをいくつかの小さい単位のサービスに分解したいときに使うアクティビティの一つです。サービス候補（Event S</description></item><item><title>Pre-IPM</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/preipm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/preipm/</guid><description>Pre-IPM # 概要 # Pre-IPMは、IPM(Iteration Planning Meeting)に向けて、ドラフト版のユーザーストーリーをDeveloper観点で確</description></item><item><title>XPの価値観</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/xp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/xp/</guid><description>XPの価値観 # XPは5つの価値観に基づいています。 コミュニケーション プロジェクトの各段階で、チームの全員が共同で作業を行います。 シンプル 開発</description></item><item><title>プロダクトビジョン / バリュープロポジション</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/leanstartup/productvision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/leanstartup/productvision/</guid><description>プロダクトビジョン / バリュープロポジション # 概要 # プロダクトビジョンは、プロダクトを通じて実現しようとしている世界を定義します。 プロジェクト</description></item><item><title>ペアプログラミング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/pairprogramming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/pairprogramming/</guid><description>ペアプログラミング # 概要 # ペアプログラミングは、開発者がペアになってプログラミングを行うという手法です。 ドライバーとナビゲーターの二人一組で</description></item><item><title>ボウリングゲーム</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/bowlinggame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/bowlinggame/</guid><description>ボウリングゲーム # 最初の一歩ではウォーミングアップとしてFizzBuzzを書いてみました。 ここでは少しだけ難易度を上げたより実践的な例として</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/agile/conclude/</guid><description>まとめ # アジャイルソフトウェア開発宣言とアジャイル開発12の原則まで読んできました。 実はここまで具体的な開発手法は一つもでてきていません。す</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/xp/conclude/</guid><description>まとめ # エクストリームプログラミング(XP)はシンプルかつ具体的な集合から構築されているアジャイル開発プロセスです。 そして、この開発プロセス</description></item><item><title>ユーザーストーリーマッピング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/userstorymapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/userstorymapping/</guid><description>ユーザーストーリーマッピング # 概要 # ユーザーストーリーマッピングでは、ユーザーストーリーを抽出しながら、ユーザーのアクション（横軸）、優先度</description></item><item><title>リサーチ計画立案</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/researchplanning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/researchplanning/</guid><description>リサーチ計画立案 # 概要 # リサーチ計画立案では、次回のユーザーリサーチで検証すべき仮説と、その検証方法について計画します。 以下の手順で準備を進</description></item><item><title>リスコフの置換原則(LSP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/lsp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/lsp/</guid><description>リスコフの置換原則(The Liskov Substitution Principle) # リスコフの置換原則(LSP)とはなにか？ # リスコフの置換原則(LSP)とは 派生型はその基本型と置換可能でな</description></item><item><title>成果物</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/products/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/products/</guid><description>成果物 # スクラムガイドにおいてスクラムチームが作成するべき成果物は3つ規定されています。 プロダクトバックログ スプリントバックログ インクリメン</description></item><item><title>4日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day4/</guid><description>4日目 # 3日まででReact+Reduxで作ったフロントエンドとSpring Bootで作ったバックエンドを連携させることができました。 しかし</description></item><item><title>IPM</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/ipm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/ipm/</guid><description>IPM # 概要 # IPM(Iteration Planning Meeting)は、各ユーザーストーリーの見積もりを行って次のイテレーションの計画を立てるミーティングです。 Product Managerが</description></item><item><title>SnapE</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/snape/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/snape/</guid><description>SnapE # 概要 # SnapEは既存システムをいくつかの小さい単位のサービスに分解したいときに使うアクティビティの一つです。サービス候補（Event S</description></item><item><title>イベント</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/events/</guid><description>イベント # 画像出典: アジャイル開発とは（中編） ちょうど富士通の公開ページにスクラムのプロセスを解説している図があったため、これを使って説明し</description></item><item><title>ソロプログラミング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/soroprogramming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/developer/practices/soroprogramming/</guid><description>ソロプログラミング # 概要 # ソロプログラミングは、開発者が1人でプログラミングを行うという手法です。これまで多くのSIの現場で採用されており、</description></item><item><title>チームビルディング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/teambuilding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/teambuilding/</guid><description>チームビルディング # チームビルディングは、チームの目的や目標の達成に向かって、各メンバーが主体的に能力を発揮しながら一丸となるチームを目指す</description></item><item><title>テストダブル</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/testdouble/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/testdouble/</guid><description>テストダブル # テスト駆動開発の開発の流れがわかってきたところで、次にテストダブルを使用したテストについて学んでいきましょう。 テストダブルとは</description></item><item><title>プラクティスの取り入れ方</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/mindset/practice/</guid><description>プラクティスの取り入れ方 # Practices（手法やツール）は氷山の一角に過ぎません。目に見える氷山の下にはPrinciples（原理・原則</description></item><item><title>プロトタイピング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/prototyping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/prototyping/</guid><description>プロトタイピング # 概要 # プロトタイピングでは、ソフトウェアのUIデザインを行います。 以下のように作業しします。 シナリオに沿って、画面遷移と各</description></item><item><title>ユーザーストーリー</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/userstory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/userstory/</guid><description>ユーザーストーリー # 概要 # ユーザーストーリーとはユーザーの要求（誰が、どのような目的で、何をしたいのか）を表わすものです。 ユーザーストーリー</description></item><item><title>依存性逆転の原則(DIP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/dip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/dip/</guid><description>依存性逆転の原則(The Dependency Inversion Principle) # 依存性逆転の原則とは # 依存性逆転の原則(DIP)とは 上位のモジュールは下位のモジュールに依存してはいけない。</description></item><item><title>2×2</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/2x2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/productmanager/practices/2x2/</guid><description>2×2 # 概要 # 2×2(two by two)とは、優先順位を徹底して意思決定を行うための手法です。 意思決定をするための2つの観点を縦軸と横軸に設定</description></item><item><title>5日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day5/</guid><description>5日目 # ではTodoを作成するバックエンドAPIを作成していきましょう。 タスク作成バックエンドAPI # テスト # まず、サーバのテストを書いてみ</description></item><item><title>CLミーティング</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/cl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/cl/</guid><description>CLミーティング # 概要 # CLミーティングは、CL(Client Liaison)/PMOとの情報共有の場です。 目的 # 定期的に情報を共有して、プ</description></item><item><title>E2Eテスト</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/e2e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaretest/e2e/</guid><description>E2Eテスト # E2Eテストとは # ここまでソフトウェアの単体テストやインテグレーションテストのやり方を見てきました。 しかし、ServerやCl</description></item><item><title>Slices</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/slices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/slices/</guid><description>Slices # 概要 # Slicesは、どこから開発を始めるか決めるアクティビティです。Swiftメソッド全体の位置付けとしては4つ目のアクティビティとな</description></item><item><title>インターフェース分離の原則(ISP)</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/isp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/softwaredesign/solidprinciple/isp/</guid><description>インターフェース分離の原則(The Interface Segregation Principle) # インタフェース分離の原則とは # インターフェス分離の原則(ISP)とは クライアントにクライアントが利</description></item><item><title>スクリプト作成</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/script/</guid><description>スクリプト作成 # 概要 # スクリプト作成では、リサーチ当日の流れや確認事項を整理したトークスクリプトを作成します。 以下の内容を記載します。 ターゲ</description></item><item><title>まとめ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/conclude/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/scrum/conclude/</guid><description>まとめ # ここまでスクラムのロール、スクラムチームが作成すべき成果物、そしてスクラムチームの開発の流れを見てきました。 ここで説明した内容をプラ</description></item><item><title>リモートワーク</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/remotework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/remotework/</guid><description>リモートワーク # リモートワークではコミュニケーションの主な手法はオンラインになります。 オンラインでのコミュニケーションでは顔を合わせないため</description></item><item><title>6日目</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/practice/day6/</guid><description>6日目 # クライアントとサーバを連携させてタスクを作成することができるようになったので、シナリオテストを作成していきましょう。 モノレポの作成 #</description></item><item><title>Tech Choice</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/techchoice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/framework/modernization/swift/techchoice/</guid><description>Tech Choice # 概要 # Tech Choiceは、開発に着手するにあたってチームで話し合ってどの技術を使うか決めるアクティビティです。Swiftメソッド全体の位</description></item><item><title>リサーチ実施</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/researchaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/researchaction/</guid><description>リサーチ実施 # 概要 # リサーチでは、仮説を検証するための情報を得るため、ユーザーへのインタビューや、ユーザーテストなどを行います。 以下の作業を</description></item><item><title>レトロスペクティブ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/retro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/retro/</guid><description>レトロスペクティブ # 概要 # レトロスペクティブ（レトロ）は、チームの活動の振り返りを行う活動です。 イテレーションでよかったこと、よくなかった点</description></item><item><title>シンセサイズ</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/synthesize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/designer/practices/synthesize/</guid><description>シンセサイズ # 概要 # シンセサイズでは、リサーチの結果から仮説は検証されたか、新たな発見があったかなどをまとめ、学びとして蓄積します。 シンセサ</description></item><item><title>営業確認会議</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/salesmeeting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/salesmeeting/</guid><description>営業確認会議 # 概要 # 営業確認会議は、各エンドユーザーの窓口になっている営業チームやその他の担当者との情報共有の場です。 また、必要に応じて営業</description></item><item><title>Internal Sync</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/internalsync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/internalsync/</guid><description>Internal Sync # 概要 # Internal Syncは、社内メンバーのみで集まって実施するミーティングです。 その日の作業の学びの共有や不明点の解消をしたり、今後の方針・</description></item><item><title>おわりに</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/inclosing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/inclosing/</guid><description>おわりに # まず、あなたは本書を最後まで読み切りました！お疲れさまです！ あなたはアジャイル開発者への第一歩を踏み出しました。 「本書を理解したら</description></item><item><title>Risks &amp; Mitigations</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/riskmitigations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/riskmitigations/</guid><description>Risks &amp;amp; Mitigations # 概要 # チームの目標を達成するためにどのようなリスクがあるかを挙げて、そのリスクを軽減するための対策を検討します。 一人ひとりの思い込み</description></item><item><title>推奨書籍</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/recommendedbooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/recommendedbooks/</guid><description>推奨書籍 # ここでは特定の言語、アーキテクチャに依存しないものを推挙しています。 リーダブルコード # https://www.amazon.co.jp/dp/4873115655/ ここで紹介するまでも無いと思いますが、チー</description></item><item><title>フィードバック</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/feedback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/feedback/</guid><description>フィードバック # 概要 # 相手の行動に対しての評価、改善点を率直に伝えます。 先輩/後輩、立場等関係なく、フラットに行いましょう。 フィードバックは</description></item><item><title>Ice Break</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/icebreak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/icebreak/</guid><description>Ice Break # 概要 # 開発業務から離れて、チームで一緒にゲームなどを行います。 目的 # メンバ間のコミュニケーション活性化や心身のリフレッシュを目的としま</description></item><item><title>Team Health Check</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/teamhealthcheck/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/teamhealthcheck/</guid><description>Team Health Check # 概要 # チームで匿名のアンケートを実施し、チームの状態を可視化します。 目的 # アンケートの結果を踏まえ、意見を共有することでメンバーがど</description></item><item><title>1on1</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/1on1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/1on1/</guid><description>1on1 # 概要 # チームのメンバー間で1対1で対話します。 キャリア形成を意識した部下と上司とで行う1on1ではなく、より身近なメンバーと気軽に話をし</description></item><item><title>ラジオ体操</title><link>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/exercise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://onebase-fujitsu.github.io/agile-dev-guide/docs/team/activities/exercise/</guid><description>ラジオ体操 # 概要 # 体力向上、健康の保持増進を図る目的に考案された、伴奏つきの体操です。 日本では、誰もが気軽に楽しめる運動として広く国民に親し</description></item></channel></rss>